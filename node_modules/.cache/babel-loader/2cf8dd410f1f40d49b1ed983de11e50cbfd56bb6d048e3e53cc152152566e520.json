{"ast":null,"code":"import { call, put, takeEvery } from \"redux-saga/effects\";\n//services\nimport authServices from \"api/services/auth\";\n\n//redux\nimport { LOGIN_USER, LOGOUT_USER, VALIDATE_REGISTRATION, RESEND_VERIFICATION } from \"./constants\";\nimport { apiError, loginSuccess, validateRegistrationSuccess, resendVerificationSuccess } from \"./actions\";\n// @ts-ignore\nconst admin_data = JSON.parse(localStorage.getItem(\"admin_data\")) ? JSON.parse(localStorage.getItem(\"admin_data\")) : JSON.parse(localStorage.getItem(\"admin_data\"));\nconst admin_role = admin_data === null || admin_data === void 0 ? void 0 : admin_data.role;\nconsole.log(admin_data === null || admin_data === void 0 ? void 0 : admin_data.role);\nfunction* loginUser({\n  payload\n}) {\n  try {\n    const {\n      user,\n      redirect\n    } = payload;\n    const response = yield call(authServices.login, user);\n    if (response.data) {\n      yield put(loginSuccess(response.data.data));\n      console.log(response.data.data);\n      window.location.replace(`${window.location.origin}${redirect}&email=${response.data.data.email}&token=${response.data.data.verify_token}`);\n    }\n  } catch (error) {\n    const message = error[\"response\"][\"data\"][\"message\"] || error.message || \"network error\";\n    yield put(apiError(message));\n  }\n}\nfunction* validateRegistration({\n  payload\n}) {\n  try {\n    const {\n      data,\n      redirect\n    } = payload;\n    const response = yield call(authServices.validateRegistration, data);\n    if (response.data) {\n      // Comma here //\n      // mixpanel.track(\"Account confirmed\", {\n      //     email: data.email,\n      // });\n\n      yield put(validateRegistrationSuccess(response.data.data));\n      console.log(response.data.data.admin);\n      localStorage.setItem(\"token\", response.data.data.token);\n      const admin_data = JSON.stringify(response.data.data.admin);\n      localStorage.setItem(\"admin_data\", admin_data);\n      {\n        admin_role === 'agent' ? window.location.replace('/mycustomers') : window.location.replace('/new-dashboard');\n      }\n    }\n  } catch (error) {\n    const message = error[\"response\"][\"data\"][\"message\"] || error.message || \"network error\";\n    yield put(apiError(message));\n  }\n}\nfunction* resendVerification({\n  payload\n}) {\n  try {\n    const {\n      data,\n      redirect\n    } = payload;\n    const response = yield call(authServices.resendVerification, data);\n    if (response.data) {\n      yield put(resendVerificationSuccess(response.data.data));\n\n      // toast.success(\"otp resent, check your e-mail\").then(() => {\n      //     window.location.replace(`${window.location.origin}${redirect}&email=${response.data.data.email}&token=${response.data.data.verify_token}`);\n      // });\n    }\n  } catch (error) {\n    const message = error[\"response\"][\"data\"][\"message\"] || error.message || \"network error\";\n    yield put(apiError(message));\n  }\n}\nfunction* logoutUser() {\n  try {\n    localStorage.removeItem(\"token\");\n  } catch (error) {\n    yield put(apiError(error));\n  }\n  // localStorage.removeItem('token')\n}\nfunction* authSaga() {\n  yield takeEvery(LOGIN_USER.REQUEST, loginUser);\n  yield takeEvery(LOGOUT_USER.REQUEST, logoutUser);\n  // yield takeEvery(REGISTER_USER.REQUEST, registerUser);\n  // yield takeEvery(FORGOT_PASSWORD.REQUEST, forgotPasswordUser);\n  // yield takeEvery(FORGOT_PASSWORD_OTP_VERIFY.REQUEST, VerifyOtpPasswordReset);\n  // yield takeEvery(CHANGE_PASSWORD.REQUEST, postNewPassword);\n\n  // yield takeEvery(VALIDATE_PHONE_AND_EMAIL.REQUEST, validatePhoneAndEmail);\n  yield takeEvery(VALIDATE_REGISTRATION.REQUEST, validateRegistration);\n  yield takeEvery(RESEND_VERIFICATION.REQUEST, resendVerification);\n}\nexport default authSaga;","map":{"version":3,"names":["call","put","takeEvery","authServices","LOGIN_USER","LOGOUT_USER","VALIDATE_REGISTRATION","RESEND_VERIFICATION","apiError","loginSuccess","validateRegistrationSuccess","resendVerificationSuccess","admin_data","JSON","parse","localStorage","getItem","admin_role","role","console","log","loginUser","payload","user","redirect","response","login","data","window","location","replace","origin","email","verify_token","error","message","validateRegistration","admin","setItem","token","stringify","resendVerification","logoutUser","removeItem","authSaga","REQUEST"],"sources":["/Users/biggie/amani/src/store/auth/saga.ts"],"sourcesContent":["import { call, put, takeEvery } from \"redux-saga/effects\";\nimport { toast } from 'react-toastify';\n\n//services\nimport authServices from \"api/services/auth\";\n\n//redux\nimport { LOGIN_USER, LOGOUT_USER, REGISTER_USER, VALIDATE_PHONE_AND_EMAIL, FORGOT_PASSWORD, FORGOT_PASSWORD_OTP_VERIFY, VALIDATE_REGISTRATION, RESEND_VERIFICATION, CHANGE_PASSWORD } from \"./constants\";\nimport { apiError, loginSuccess, registerSuccess, forgotPasswordUserSuccess, VerifyOtpPasswordResetSuccess, validatePhoneAndEmailSuccess, validateRegistrationSuccess, resendVerificationSuccess, postNewPasswordSuccess, logoutUserSuccess } from \"./actions\";\nimport { ResponseGenerator } from \"store/type\";\n// @ts-ignore\nconst admin_data = JSON.parse(localStorage.getItem(\"admin_data\")) ? JSON.parse(localStorage.getItem(\"admin_data\")) : JSON.parse(localStorage.getItem(\"admin_data\"));\nconst admin_role = admin_data?.role\nconsole.log(admin_data?.role)\n\n\nfunction* loginUser({ payload }: any) {\n    try {\n        const { user, redirect } = payload;\n        const response: ResponseGenerator = yield call(authServices.login, user);\n        if (response.data) {\n            yield put(loginSuccess(response.data.data));\n            console.log(response.data.data);\n            window.location.replace(`${window.location.origin}${redirect}&email=${response.data.data.email}&token=${response.data.data.verify_token}`);\n        }\n    } catch (error) {\n        const message = error[\"response\"][\"data\"][\"message\"] || error.message || \"network error\";\n\n        yield put(apiError(message));\n    }\n}\n\n\nfunction* validateRegistration({ payload }: any) {\n    try {\n        const { data, redirect } = payload;\n        const response: ResponseGenerator = yield call(authServices.validateRegistration, data);\n        if (response.data) {\n            // Comma here //\n            // mixpanel.track(\"Account confirmed\", {\n            //     email: data.email,\n            // });\n\n            yield put(validateRegistrationSuccess(response.data.data));\n            console.log(response.data.data.admin);\n\n            localStorage.setItem(\"token\", response.data.data.token);\n            const admin_data = JSON.stringify(response.data.data.admin)\n            localStorage.setItem(\"admin_data\", admin_data)\n            {\n                admin_role === 'agent' ? (\n                    window.location.replace('/mycustomers')\n                ) : (\n                    window.location.replace('/new-dashboard')\n                )\n            }\n\n        }\n    } catch (error) {\n        const message = error[\"response\"][\"data\"][\"message\"] || error.message || \"network error\";\n\n        yield put(apiError(message));\n    }\n}\n\nfunction* resendVerification({ payload }: any) {\n    try {\n        const { data, redirect } = payload;\n\n        const response: ResponseGenerator = yield call(authServices.resendVerification, data);\n\n        if (response.data) {\n            yield put(resendVerificationSuccess(response.data.data));\n\n            // toast.success(\"otp resent, check your e-mail\").then(() => {\n            //     window.location.replace(`${window.location.origin}${redirect}&email=${response.data.data.email}&token=${response.data.data.verify_token}`);\n            // });\n        }\n    } catch (error) {\n        const message = error[\"response\"][\"data\"][\"message\"] || error.message || \"network error\";\n\n        yield put(apiError(message));\n    }\n}\n\nfunction* logoutUser() {\n    try {\n        localStorage.removeItem(\"token\")\n    } catch (error) {\n        yield put(apiError(error));\n    }\n    // localStorage.removeItem('token')\n}\n\nfunction* authSaga() {\n    yield takeEvery(LOGIN_USER.REQUEST, loginUser);\n    yield takeEvery(LOGOUT_USER.REQUEST, logoutUser);\n    // yield takeEvery(REGISTER_USER.REQUEST, registerUser);\n    // yield takeEvery(FORGOT_PASSWORD.REQUEST, forgotPasswordUser);\n    // yield takeEvery(FORGOT_PASSWORD_OTP_VERIFY.REQUEST, VerifyOtpPasswordReset);\n    // yield takeEvery(CHANGE_PASSWORD.REQUEST, postNewPassword);\n\n    // yield takeEvery(VALIDATE_PHONE_AND_EMAIL.REQUEST, validatePhoneAndEmail);\n    yield takeEvery(VALIDATE_REGISTRATION.REQUEST, validateRegistration);\n    yield takeEvery(RESEND_VERIFICATION.REQUEST, resendVerification);\n}\n\nexport default authSaga;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}